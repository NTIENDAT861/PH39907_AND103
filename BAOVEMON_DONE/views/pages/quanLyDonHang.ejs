<%- include('../layout/head.ejs') %>

   <%- include('../layout/nav.ejs') %>
      <nav class="flex mt-17" aria-label="Breadcrumb">
         <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
            <li class="inline-flex items-center">
               <a href="#"
                  class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white">
                  <svg class="w-3 h-3 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                     viewBox="0 0 20 20">
                     <path
                        d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z" />
                  </svg>
                  Trang Chủ
               </a>
            </li>
            <li>
               <div class="flex items-center">
                  <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true"
                     xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                     <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="m1 9 4-4-4-4" />
                  </svg>
                  <a href="#"
                     class="ms-1 text-sm font-medium text-gray-700 hover:text-blue-600 md:ms-2 dark:text-gray-400 dark:hover:text-white">
                     <%= title %>
                  </a>
               </div>
            </li>

         </ol>
      </nav>

      <!-- NỘI DUNG -->
      <div class="relative overflow-x-auto shadow-md sm:rounded-lg mt-4">
         <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
               <tr>
                  <th scope="col" class="p-4">
                     <div class="flex items-center">
                        ID
                     </div>
                  </th>
                  <th scope="col" class="px-6 py-3">
                     Người mua
                  </th>
                  <th scope="col" class="px-6 py-3  justify-content-center">
                     Sản phẩm
                  </th>
                  <th scope="col" class="px-6 py-3">
                     Giá
                  </th>
                  <th scope="col" class="px-6 py-3">
                     Mã giảm giá
                  </th>
                  <th scope="col" class="px-6 py-3">
                     Phương thức
                  </th>
                  <th scope="col" class="px-6 py-3">
                     Trạng thái
                  </th>
                  <th scope="col" class="px-6 py-3 ">
                     Thao tác
                  </th>
                  <th scope="col" class="p-4">
                     <div class="flex items-center">

                     </div>
                  </th>
               </tr>
            </thead>
            <tbody id="table-body-data">
            


            </tbody>
         </table>
         <div class="flex justify-center">
            <div class="pagination-data-ntd" id="pagination">
             
            </div>
          </div>
      </div>

      <div id="data-modal" tabindex="-1" aria-hidden="true"
         class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
         <div class="relative p-4 w-full max-w-md max-h-full">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
               <!-- Modal header -->
               <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                     Thông tin đơn hàng chi tiết
                  </h3>
                  <button type="button" data-modal-hide="data-modal" id="data-modal-close"
                     class="end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
                     <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                           d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                     </svg>
                     <span class="sr-only">Đóng</span>
                  </button>
               </div>
               <!-- Modal body -->
               <div class="p-4 md:p-5">

                  <div>
                     <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Người mua</label>
                     <input id="nguoi-mua" readonly
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        placeholder="" required />
                  </div>

                 
                  <div>
                     <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Tổng tiền hàng</label>
                     <input readonly
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        id="tien-san-pham" required />
                  </div>
                  <div>
                     <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Phí vận chuyển</label>
                     <input readonly
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        value="30,000 đ" required />
                  </div>
                  <div>
                     <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Tiền giảm giá</label>
                     <input id="tien-giam-gia" readonly
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        placeholder="" required />
                  </div>
                  <div>
                     <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Thành tiền</label>
                     <input id="thanh-tien" readonly
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        placeholder="" required />
                  </div>
                  <div>
                     <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Phương thức thanh
                        toán</label>
                     <input readonly id="phuong-thuc"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        placeholder="" required />
                  </div>
                  <div>
                     <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Thời gian</label>
                     <input readonly id="thoi-gian"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
                        placeholder="" required />
                  </div>
               </div>
            </div>
         </div>
      </div>
      <div id="action-don-hang" tabindex="-1" aria-hidden="true"
         class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
         <div class="relative p-4 w-full max-w-md max-h-full">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
               <!-- Modal header -->
               <div class="flex items-center justify-between p-2  border-b rounded-t dark:border-gray-600">
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white" id="labe-donhang">
                     Cập nhật đơn hàng
                  </h3>
                  <button type="button" data-modal-hide="action-don-hang" id="action-don-hang-close"
                     class="end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
                     <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                           d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                     </svg>
                     <span class="sr-only">Đóng</span>
                  </button>
               </div>
               <!-- Modal body -->
               <div class="p-2">
                  <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                     id="id-don-hang-lable"></label>

                     <div id="card-product">
                       
                     </div>
                     <div class="container-action" id="div-don-hang-action">
              
                     </div>

               </div>
            </div>
         </div>
      </div>
      <script>
    
    var nguoiMua = document.getElementById('nguoi-mua');
         var phuongThuc = document.getElementById('phuong-thuc');
         var time = document.getElementById('thoi-gian');
         var totalMoneyProductS = document.getElementById('tien-san-pham');
         var totalMoneydiscountPrice = document.getElementById('tien-giam-gia');
         var TotolMoneyOrder = document.getElementById('thanh-tien');
         let data = <%- JSON.stringify(data) %>; 
             console.log(data);
            const rowsPerPage = 5; 
            let currentPage = 1;
              renderTable(currentPage);
            renderPagination(data.length, rowsPerPage, currentPage);
  function getSvg(status) {

    if (status == '1' || status == '0') {
        return `
            <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
            </svg>`;
    }
    return ''; 
}

async function getTotoMoney(idOrder) {
   const data = {
    id: idOrder
      }

  var api = "/orders-items/total-money-product";
  const response = await fetch(api, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  });
  const data_result = await response.json();
  if(data_result.status == 200)
  {
   return data_result.money
  }
  else
  {
   return 0
  }
}

  function formatNumber_Money(number) {
  return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}


   
       
         async function openOrderDonHang(order) {
            
            setNull();
            const dataModal = new Modal(document.getElementById('data-modal'));
            const close = document.getElementById('data-modal-close');
            dataModal.show();


            close.addEventListener("click", ()=> {
               dataModal.hide();
            })
            totalMoneyProduct_Number = await getTotoMoney(order._id);
            totalMoneydiscountPrice_Number =  order.idVoucher && order.idVoucher.discountPrice ? order.idVoucher.discountPrice : 0;
            nguoiMua.value = order.idUser && order.idUser.fullname ? order.idUser.fullname : '---';
            totalMoneyProductS.value = formatCurrency(totalMoneyProduct_Number);
            totalMoneydiscountPrice.value = formatCurrency(totalMoneydiscountPrice_Number);
            TotolMoneyOrder.value = tinhTotalMoneyOrder(totalMoneyProduct_Number,totalMoneydiscountPrice_Number);
            phuongThuc.value = order.payment;
            time.value = formatDateTime(order.updatedAt);

         }
         function tinhTotalMoneyOrder(totalMoneyProduct, totalMoneydiscountPrice) {

         const productTotal = Number(totalMoneyProduct) || 0;
         const discountTotal = Number(totalMoneydiscountPrice) || 0; 

         return formatCurrency((productTotal + 30000) - discountTotal);
      }

         function setNull() {


            nguoiMua.value = "";
            totalMoneyProductS.value = "";
            totalMoneydiscountPrice.value = "";
            TotolMoneyOrder.value = "";
            phuongThuc.value = "";
            time.value = "";

         }

         function ActionDonHang(act, id) {
          var lable_id = document.getElementById('id-don-hang-lable');
          var divAct = document.getElementById('div-don-hang-action');
          const cardProduct =  document.getElementById('div-don-hang-action');
         cardProduct.innerHTML = "";
         cardProduct.style.display = "grid";
         document.getElementById('card-product').style.display = "none"
          const dataModal = new Modal(document.getElementById('action-don-hang'));
            const close = document.getElementById('action-don-hang-close');
            dataModal.show();


            close.addEventListener("click", ()=> {
               dataModal.hide();
            })
    lable_id.innerHTML = 'Đơn hàng số: ' + id;
    divAct.innerHTML = "";
    if (act == 'duyet') {
      divAct.innerHTML = `
            <button  
                type="button" 
                onclick="ActionBtnDonHang('huy-don', '${id}')"
                class="px-3 py-2 text-xs font-medium text-center text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-800">
                Hủy đơn
            </button>
            <button 
                type="button" 
                onclick="ActionBtnDonHang('xac-nhan', '${id}')"
                class="px-3 py-2 text-xs font-medium text-center text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800">
               Xác nhận
            </button>
        `;
    }

    if (act == 'done') {

      divAct.innerHTML = `
            <button  
                type="button" 
                onclick="ActionBtnDonHang('huy-don', '${id}')"
                class="px-3 py-2 text-xs font-medium text-center text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-800">
                Hủy đơn
            </button>
            <button 
                type="button" 
                onclick="ActionBtnDonHang('thanh-cong', '${id}')"
                class="px-3 py-2 text-xs font-medium text-center text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:outline-none focus:ring-green-300 dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-800">
                Thành công
            </button>
        `;
    }
}
function getStatusInfo(status) {
             const statusMap = {
                 '-1': { action: 'null', text: 'Hủy', color: 'bg-red-100 text-red-800', disabled: 'disabled' },
                 '0': { action: 'duyet', text: 'Chờ xác nhận', color: 'bg-yellow-100 text-yellow-800',disabled: '' },
                 '1': { action: 'done', text: 'Đang giao', color: 'bg-blue-100 text-blue-800', disabled: '' },
                 '2': { action: 'null', text: 'Thành công', color: 'bg-green-100 text-green-800', disabled: 'disabled' }
             };
             return statusMap[status] || { action: 'null', text: 'Không xác định', color: 'bg-gray-100 text-gray-800', disabled: 'disabled' };
         }
         function resetFields() {
             ['nguoi-mua', 'san-pham', 'gia', 'phuong-thuc', 'thoi-gian'].forEach(id => {
                 document.getElementById(id).value = '';
             });
         }
async function ActionBtnDonHang(act, id) {

   const data = {
    _id: id,
    action: act,
    __v: 0
  }

  var api = "/orders/actions";
  const response = await fetch(api, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  });
  const data_result = await response.json();
  Swal.fire({
    title: "Thông báo",
    text: data_result.status === 200 ? "Sửa thành công!" : "Sửa không thành công!",
    icon: data_result.status === 200 ? "success" : "error"
  }).then(() => {

    setTimeout(() => location.reload(), 500);

  });

   
}
  

         function renderTable(page) {
    const tableBody = document.getElementById('table-body-data');
    tableBody.innerHTML = ''; // Xóa dữ liệu cũ trong tbody

    const start = (page - 1) * rowsPerPage;
    const end = page * rowsPerPage;
    const pageData = data.slice(start, end);

    pageData.forEach((item, index) => {
      const tr = document.createElement('tr');
      tr.classList.add('bg-white', 'border-b', 'dark:bg-gray-800', 'dark:border-gray-700', 'hover:bg-gray-50', 'dark:hover:bg-gray-600');
      item.totalPrice = formatNumber_Money(item.totalPrice) ;
      let item_encode = encode_array_item(item);
    
      const status = getStatusInfo(item.status);
     const svg = getSvg(item.status);
  
  

      tr.innerHTML = `
    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
        <td class="w-4 p-4">
            <span class="text-gray-900 dark:text-white">
                ${start + index + 1}
            </span>
        </td>
        <th id="user-name-${item.idUser}" scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
            <span id="fullname-${item.idUser ? item.idUser._id : 'unknown'}">
                ${item.idUser && item.idUser.fullname ? item.idUser.fullname : '---'}
            </span>
        </th>
        <td class="px-6 py-4 btn-view-z">
            <button type="button" class="btn-view"  onclick="openProduct('${item._id}')"><img src="/images/search-product.png" ></button>
        </td>
        <td class="px-6 py-4">
            ${item.totalPrice} VNĐ
        </td>
        <td class="px-6 py-4">
            ${item.idVoucher && item.idVoucher.code ? item.idVoucher.code : '---'}
        </td>
        <td class="px-6 py-4">
            ${item.payment}
        </td>
        <td class="px-6 py-4">
                    <button onclick="ActionDonHang('${status.action}', '${item._id}')"  data-modal-target="action-don-hang" 
                         data-modal-toggle="action-don-hang" 
                        class="text-xs font-medium px-2.5 py-0.5 rounded-full ${status.color}  kaf" 
                        ${status.disabled}>
                        ${status.text}
                        ${svg}
                    </button>
                </td>
        <td class="px-6 py-4">
            <button onclick="openOrderDonHang(${item_encode})" data-modal-target="data-modal" 
                data-modal-toggle="data-modal" 
              
                type="button">
                <img src="/images/code-review_10049034.png" class="toggleImgOpen">
            </button>
        </td>
    </tr>
`;
      tableBody.appendChild(tr);
    });
  }
 
  function renderPagination(totalRows, rowsPerPage, currentPage) {

    const pagination = document.getElementById('pagination');
    pagination.innerHTML = ''; 

    const totalPages = Math.ceil(totalRows / rowsPerPage);

    // Tạo nút "Previous"
    const prevButton = document.createElement('button');
    prevButton.textContent = 'Previous';
    prevButton.disabled = currentPage === 1;
    prevButton.classList.add('page-btn-act');
    prevButton.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        renderTable(currentPage);
        renderPagination(totalRows, rowsPerPage, currentPage);
      }
    });
    pagination.appendChild(prevButton);

    // Tạo các nút trang
    for (let i = 1; i <= totalPages; i++) {
      const button = document.createElement('button');
      button.textContent = i;
      button.classList.add('page-btn');
      if (i === currentPage) {
        button.classList.add('active');
      }
      button.addEventListener('click', () => {
        currentPage = i;
        renderTable(currentPage);
        renderPagination(totalRows, rowsPerPage, currentPage);
      });
      pagination.appendChild(button);
    }

    // Tạo nút "Next"
    const nextButton = document.createElement('button');
    nextButton.textContent = 'Next';
    nextButton.disabled = currentPage === totalPages;
    nextButton.classList.add('page-btn-act');
    nextButton.addEventListener('click', () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderTable(currentPage);
        renderPagination(totalRows, rowsPerPage, currentPage);
      }
    });
    pagination.appendChild(nextButton);
  }


  async function openProduct(id) {
    const dataModal = new Modal(document.getElementById('action-don-hang'));
    const close = document.getElementById('action-don-hang-close');
    const cardProduct = document.getElementById('card-product');
    const data = { id };

    dataModal.show();
    document.getElementById('div-don-hang-action').style.display = "none";
    document.getElementById('labe-donhang').innerText = "Chi tiết sản phẩm";
    document.getElementById('id-don-hang-lable').innerHTML = "";

    try {
        const response = await fetch("/orders-items/get-product", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });
        const result = await response.json();

        cardProduct.style.display = "block";
        cardProduct.innerHTML = "";

        if (result.status === 200) {
            result.data.forEach(item => {
                const { productName, description, idProductType, price } = item.idProduct;
                const card = document.createElement('div');
                card.classList.add('card-product-body');
                card.innerHTML = `
                    <div class="tile-content-product">
                        <div class="ten-product">Tên sản phẩm: <span>${productName}</span></div>
                        <button type="button" class="btn-view-product" onclick="showData(this)">
                            <img src="/images/eye.png" id="toggleImg">
                        </button>
                    </div>
                    <ul class="product-ul">
                        <li>Ghi chú: <span>${description}</span></li>
                        <li>Loại: <span>${idProductType.name}</span></li>
                        <li>Giá: <span>${formatNumber_Money(price)} VNĐ</span></li>
                        <li>Số lượng: <span>${item.quantity}</span></li>
                        <li>Kích thước: <span>${item.size}</span></li>
                        <li>Màu sắc: <span>${item.color}</span></li>
                    </ul>
                `;
                cardProduct.appendChild(card);
            });
        } else {
            const card = document.createElement('div');
            card.classList.add('card-product-null');
            card.innerHTML = `<img src="/images/2953962.jpg" alt="No product available">`;
            cardProduct.appendChild(card);
        }
    } catch (error) {
        console.error('Error fetching product details:', error);
    }

    close.addEventListener("click", () => dataModal.hide());
}

  function showData(buttonElement) {
   
    const imgElement = buttonElement.querySelector("img"); 
    const productDetails = buttonElement.closest('.tile-content-product').nextElementSibling; 

    if (productDetails.style.display === "none" || productDetails.style.display === "") {
      
        productDetails.style.display = "block";
        imgElement.src = "/images/eye-close.png"; 
    } else {
     
        productDetails.style.display = "none";
        imgElement.src = "/images/eye.png"; 
    }
}

  </script>
      
      <!-- KẾT THÚC -->
      <%- include('../layout/footer.ejs') %>